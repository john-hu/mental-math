{"version":3,"sources":["Question.js","ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPressed","e","onAnswer","target","value","key","userAnswer","state","answer","renderRow","index","classes","react_default","a","createElement","className","row","data-index","candidates","rows","map","_ref","min","max","Math","round","random","reduce","acc","v","nextProps","header","_ref2","setState","_this$props","Paper_default","clsNames","root","Typography_default","variant","component","TextField_default","autoFocus","type","InputProps","input","answerInput","onKeyPress","PureComponent","withStyles","theme","display","flexDirection","padding","borderBottom","concat","palette","divider","objectSpread","typography","display2","marginBottom","marginTop","textAlign","&:before","content","float","borderTop","display1","ResultDialog","answered","correct","elapsed","open","onClose","score","secondUsed","Dialog_default","DialogTitle_default","List_default","ListItem_default","ListItemText_default","primary","secondary","DialogActions_default","Button_default","onClick","color","defaultTypes","App","handleTimerUpdate","Date","getTime","startTime","handleResultDialogClosed","resultVisible","handleTimerStartStop","fn","timerId","window","clearInterval","undefined","answeredCount","correctCount","setInterval","handleAnswered","increaseAnswered","bind","assertThisInitialized","_this$state","_this$state2","handleAnswerChanged","AppBar_default","Toolbar_default","grow","timerBox","AccessTimeOutlined_default","headerIcon","Grid_default","grid","container","spacing","justify","item","xs","sm","md","src_Question","question","src_ResultDialog","flexGrow","margin","width","marginLeft","verticalAlign","unit","text","minHeight","Boolean","location","hostname","match","app","CssBaseline_default","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.918cf6b9.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport clsNames from 'classnames';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = (theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: '1rem'\n  },\n  header: {\n    borderBottom: `solid 0.2rem ${theme.palette.divider}`\n  },\n  row: {\n    ...theme.typography.display2,\n    marginBottom: '0.1rem',\n    marginTop: '0.1rem',\n    textAlign: 'right',\n    '&:before': {\n      content: 'attr(data-index)',\n      float: 'left'\n    }\n  },\n  answer: {\n    borderTop: `solid 0.1rem ${theme.palette.divider}`\n  },\n  answerInput: {\n    ...theme.typography.display1,\n    textAlign: 'right'\n  }\n});\n\nclass Question extends PureComponent {\n  static propTypes = {\n    answer: PropTypes.number,\n    header: PropTypes.node,\n    rows: PropTypes.arrayOf(\n      PropTypes.shape({\n        min: PropTypes.number,\n        max: PropTypes.number\n      })\n    ),\n    onAnswer: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    const candidates = props.rows.map(({ min, max }) => Math.round(Math.random() * max + min));\n    this.state = {\n      candidates,\n      answer: candidates.reduce((acc, v) => acc + v, 0)\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.header !== this.props.header) {\n      const candidates = nextProps.rows.map(({ min, max }) => Math.round(Math.random() * max + min));\n      this.setState({\n        candidates,\n        answer: candidates.reduce((acc, v) => acc + v, 0)\n      });\n    }\n  }\n\n  handleKeyPressed = (e) => {\n    const { onAnswer } = this.props;\n    if (!e.target.value || e.key !== 'Enter' || !onAnswer) {\n      return;\n    }\n    const userAnswer = +e.target.value;\n    onAnswer(userAnswer, this.state.answer, userAnswer === this.state.answer);\n    e.target.value = '';\n  };\n\n  renderRow = (value, index) => {\n    const { classes } = this.props;\n    return (\n      <div key={index} className={classes.row} data-index={index + 1}>\n        {value}\n      </div>\n    );\n  };\n\n  render() {\n    const { answer, className, classes, header } = this.props;\n    const { candidates } = this.state;\n    return (\n      <Paper className={clsNames(classes.root, className)}>\n        <Typography className={classes.header} variant=\"h4\" component=\"h4\">\n          {header}\n        </Typography>\n        {candidates.map(this.renderRow)}\n        <TextField\n          autoFocus\n          className={clsNames(classes.answer, classes.row)}\n          type=\"number\"\n          InputProps={{\n            classes: { input: classes.answerInput }\n          }}\n          onKeyPress={this.handleKeyPressed}\n        >\n          {answer}\n        </TextField>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(Question);\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from '@material-ui/core/Typography';\n\nclass ResultDialog extends PureComponent {\n  static propTypes = {\n    answered: PropTypes.number.isRequired,\n    correct: PropTypes.number.isRequired,\n    elapsed: PropTypes.number.isRequired,\n    open: PropTypes.bool,\n\n    onClose: PropTypes.func\n  };\n\n  static defaultTypes = {\n    open: false\n  };\n\n  render() {\n    const { answered, correct, elapsed, open, onClose } = this.props;\n    const score = answered ? `${Math.round(correct * 100 / answered)}%` : 'N/A';\n    const secondUsed = Math.round(elapsed / 1000);\n    return (\n      <Dialog open={open} onClose={onClose}>\n        <DialogTitle>Your result:</DialogTitle>\n        <List>\n          <ListItem>\n            <Typography>You did a great job. You answered {answered} questions with {correct} correct answers within {secondUsed} seconds.</Typography>\n          </ListItem>\n          <ListItem>\n            <ListItemText primary=\"Your score:\" secondary={score} />\n          </ListItem>\n          <ListItem>\n            <ListItemText primary=\"Time used:\" secondary={`${secondUsed} seconds`} />\n          </ListItem>\n        </List>\n        <DialogActions>\n          <Button onClick={onClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\n\nexport default ResultDialog;\n","import React, { PureComponent } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport AccessTimeOutlinedIcon from '@material-ui/icons/AccessTimeOutlined';\n\nimport Question from './Question';\nimport ResultDialog from './ResultDialog';\n\nconst styles = (theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  grid: {\n    margin: '64px 0 0 0',\n    width: '100%'\n  },\n  grow: {\n    flexGrow: 1\n  },\n  timerBox: {\n    marginLeft: '8px'\n  },\n  headerIcon: {\n    verticalAlign: 'sub'\n  },\n  question: {\n    padding: theme.spacing.unit * 2,\n    color: theme.palette.text.secondary,\n    minHeight: '240px'\n  }\n});\n\nconst rows = [\n  {\n    min: 0,\n    max: 10\n  },\n  {\n    min: -5,\n    max: 10\n  },\n  {\n    min: 16,\n    max: 69\n  },\n  {\n    min: -10,\n    max: 10\n  }\n];\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answeredCount: 0,\n      correctCount: 0,\n      elapsed: 0,\n      resultVisible: false,\n      startTime: null,\n      timerId: null\n    };\n  }\n\n  handleTimerUpdate = () => this.setState({ elapsed: new Date().getTime() - this.state.startTime });\n  handleResultDialogClosed = () => this.setState({ resultVisible: false });\n\n  handleTimerStartStop = (fn) => {\n    if (this.state.timerId) {\n      window.clearInterval(this.state.timerId);\n      this.setState(\n        {\n          resultVisible: true,\n          startTime: 0,\n          timerId: null\n        },\n        typeof fn === 'function' ? fn : undefined\n      );\n    } else {\n      this.setState(\n        {\n          answeredCount: 0,\n          correctCount: 0,\n          elapsed: 0,\n          startTime: new Date().getTime(),\n          timerId: window.setInterval(this.handleTimerUpdate, 250)\n        },\n        typeof fn === 'function' ? fn : undefined\n      );\n    }\n  };\n\n  handleAnswered = (userAnswer, answer, correct) => {\n    if (!this.state.timerId) {\n      this.handleTimerStartStop(this.increaseAnswered.bind(this, correct));\n    } else {\n      this.increaseAnswered(correct);\n    }\n  };\n\n  increaseAnswered = (correct) => {\n    const { answeredCount, correctCount } = this.state;\n    this.setState({\n      answeredCount: answeredCount + 1,\n      correctCount: (correctCount || 0) + +correct\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { answeredCount, correctCount, elapsed, resultVisible, timerId } = this.state;\n    const score = `(${correctCount} / ${answeredCount})`;\n    return (\n      <div className={classes.root} onKeyPress={this.handleAnswerChanged}>\n        <AppBar>\n          <Toolbar>\n            <Typography className={classes.grow} color=\"inherit\" variant=\"h6\">\n              Score: {score},\n              <span className={classes.timerBox}>\n                <AccessTimeOutlinedIcon className={classes.headerIcon} />\n                : {Math.round(elapsed / 1000)}s\n              </span>\n            </Typography>\n            <Button color=\"inherit\" onClick={this.handleTimerStartStop}>\n              {timerId ? 'Stop' : 'Start'}\n            </Button>\n          </Toolbar>\n        </AppBar>\n        <Grid className={classes.grid} container spacing={24} justify=\"center\">\n          <Grid item xs={12} sm={6} md={4}>\n            <Question\n              className={classes.question}\n              rows={rows}\n              header={`Q ${answeredCount + 1}`}\n              onAnswer={this.handleAnswered}\n            />\n          </Grid>\n        </Grid>\n        <ResultDialog\n          answered={answeredCount}\n          correct={correctCount}\n          elapsed={elapsed}\n          open={resultVisible}\n          onClose={this.handleResultDialogClosed}\n        />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n  <div>\n    <CssBaseline />\n    <App />\n  </div>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}